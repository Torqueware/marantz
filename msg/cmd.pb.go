// Code generated by protoc-gen-gogo.
// source: cmd.proto
// DO NOT EDIT!

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	cmd.proto
	cmds.proto

It has these top-level messages:
	Cmd
*/
package msg

import proto "github.com/gogo/protobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Cmd_Cmd int32

const (
	Cmd_CMD_CLOSE Cmd_Cmd = 0
	Cmd_CMD_RAW   Cmd_Cmd = 1
	Cmd_CMD_PWR   Cmd_Cmd = 2
	Cmd_CMD_VOL   Cmd_Cmd = 3
	Cmd_CMD_SRC   Cmd_Cmd = 4
)

var Cmd_Cmd_name = map[int32]string{
	0: "CMD_CLOSE",
	1: "CMD_RAW",
	2: "CMD_PWR",
	3: "CMD_VOL",
	4: "CMD_SRC",
}
var Cmd_Cmd_value = map[string]int32{
	"CMD_CLOSE": 0,
	"CMD_RAW":   1,
	"CMD_PWR":   2,
	"CMD_VOL":   3,
	"CMD_SRC":   4,
}

func (x Cmd_Cmd) Enum() *Cmd_Cmd {
	p := new(Cmd_Cmd)
	*p = x
	return p
}
func (x Cmd_Cmd) String() string {
	return proto.EnumName(Cmd_Cmd_name, int32(x))
}
func (x *Cmd_Cmd) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_Cmd_value, data, "Cmd_Cmd")
	if err != nil {
		return err
	}
	*x = Cmd_Cmd(value)
	return nil
}

type Cmd_PwrValue int32

const (
	Cmd_PWR_OFF Cmd_PwrValue = 1
	Cmd_PWR_ON  Cmd_PwrValue = 2
)

var Cmd_PwrValue_name = map[int32]string{
	1: "PWR_OFF",
	2: "PWR_ON",
}
var Cmd_PwrValue_value = map[string]int32{
	"PWR_OFF": 1,
	"PWR_ON":  2,
}

func (x Cmd_PwrValue) Enum() *Cmd_PwrValue {
	p := new(Cmd_PwrValue)
	*p = x
	return p
}
func (x Cmd_PwrValue) String() string {
	return proto.EnumName(Cmd_PwrValue_name, int32(x))
}
func (x *Cmd_PwrValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_PwrValue_value, data, "Cmd_PwrValue")
	if err != nil {
		return err
	}
	*x = Cmd_PwrValue(value)
	return nil
}

type Cmd_VolValue int32

const (
	Cmd_VOL_UP        Cmd_VolValue = 1
	Cmd_VOL_DOWN      Cmd_VolValue = 2
	Cmd_VOL_UP_FAST   Cmd_VolValue = 3
	Cmd_VOL_DOWN_FAST Cmd_VolValue = 4
)

var Cmd_VolValue_name = map[int32]string{
	1: "VOL_UP",
	2: "VOL_DOWN",
	3: "VOL_UP_FAST",
	4: "VOL_DOWN_FAST",
}
var Cmd_VolValue_value = map[string]int32{
	"VOL_UP":        1,
	"VOL_DOWN":      2,
	"VOL_UP_FAST":   3,
	"VOL_DOWN_FAST": 4,
}

func (x Cmd_VolValue) Enum() *Cmd_VolValue {
	p := new(Cmd_VolValue)
	*p = x
	return p
}
func (x Cmd_VolValue) String() string {
	return proto.EnumName(Cmd_VolValue_name, int32(x))
}
func (x *Cmd_VolValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_VolValue_value, data, "Cmd_VolValue")
	if err != nil {
		return err
	}
	*x = Cmd_VolValue(value)
	return nil
}

type Cmd_SrcValue int32

const (
	Cmd_SRC_TV       Cmd_SrcValue = 1
	Cmd_SRC_DVD      Cmd_SrcValue = 2
	Cmd_SRC_VCR1     Cmd_SrcValue = 3
	Cmd_SRC_DSS_VCR2 Cmd_SrcValue = 5
	Cmd_SRC_AUX1     Cmd_SrcValue = 9
	Cmd_SRC_AUX2     Cmd_SrcValue = 10
	Cmd_SRC_CD_CDR   Cmd_SrcValue = 12
	Cmd_SRC_TAPE     Cmd_SrcValue = 14
	Cmd_SRC_TUNER1   Cmd_SrcValue = 15
	Cmd_SRC_FM1      Cmd_SrcValue = 16
	Cmd_SRC_AM1      Cmd_SrcValue = 17
	Cmd_SRC_XM1      Cmd_SrcValue = 19
)

var Cmd_SrcValue_name = map[int32]string{
	1:  "SRC_TV",
	2:  "SRC_DVD",
	3:  "SRC_VCR1",
	5:  "SRC_DSS_VCR2",
	9:  "SRC_AUX1",
	10: "SRC_AUX2",
	12: "SRC_CD_CDR",
	14: "SRC_TAPE",
	15: "SRC_TUNER1",
	16: "SRC_FM1",
	17: "SRC_AM1",
	19: "SRC_XM1",
}
var Cmd_SrcValue_value = map[string]int32{
	"SRC_TV":       1,
	"SRC_DVD":      2,
	"SRC_VCR1":     3,
	"SRC_DSS_VCR2": 5,
	"SRC_AUX1":     9,
	"SRC_AUX2":     10,
	"SRC_CD_CDR":   12,
	"SRC_TAPE":     14,
	"SRC_TUNER1":   15,
	"SRC_FM1":      16,
	"SRC_AM1":      17,
	"SRC_XM1":      19,
}

func (x Cmd_SrcValue) Enum() *Cmd_SrcValue {
	p := new(Cmd_SrcValue)
	*p = x
	return p
}
func (x Cmd_SrcValue) String() string {
	return proto.EnumName(Cmd_SrcValue_name, int32(x))
}
func (x *Cmd_SrcValue) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Cmd_SrcValue_value, data, "Cmd_SrcValue")
	if err != nil {
		return err
	}
	*x = Cmd_SrcValue(value)
	return nil
}

type Cmd struct {
	Cmd              *Cmd_Cmd      `protobuf:"varint,1,req,name=cmd,enum=msg.Cmd_Cmd" json:"cmd,omitempty"`
	IntValue         *int32        `protobuf:"varint,2,opt,name=intValue" json:"intValue,omitempty"`
	StrValue         *string       `protobuf:"bytes,3,opt,name=strValue" json:"strValue,omitempty"`
	Pwr              *Cmd_PwrValue `protobuf:"varint,4,opt,name=pwr,enum=msg.Cmd_PwrValue" json:"pwr,omitempty"`
	Vol              *Cmd_VolValue `protobuf:"varint,5,opt,name=vol,enum=msg.Cmd_VolValue" json:"vol,omitempty"`
	Src              *Cmd_SrcValue `protobuf:"varint,6,opt,name=src,enum=msg.Cmd_SrcValue" json:"src,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Cmd) Reset()         { *m = Cmd{} }
func (m *Cmd) String() string { return proto.CompactTextString(m) }
func (*Cmd) ProtoMessage()    {}

func (m *Cmd) GetCmd() Cmd_Cmd {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return Cmd_CMD_CLOSE
}

func (m *Cmd) GetIntValue() int32 {
	if m != nil && m.IntValue != nil {
		return *m.IntValue
	}
	return 0
}

func (m *Cmd) GetStrValue() string {
	if m != nil && m.StrValue != nil {
		return *m.StrValue
	}
	return ""
}

func (m *Cmd) GetPwr() Cmd_PwrValue {
	if m != nil && m.Pwr != nil {
		return *m.Pwr
	}
	return Cmd_PWR_OFF
}

func (m *Cmd) GetVol() Cmd_VolValue {
	if m != nil && m.Vol != nil {
		return *m.Vol
	}
	return Cmd_VOL_UP
}

func (m *Cmd) GetSrc() Cmd_SrcValue {
	if m != nil && m.Src != nil {
		return *m.Src
	}
	return Cmd_SRC_TV
}

func init() {
	proto.RegisterEnum("msg.Cmd_Cmd", Cmd_Cmd_name, Cmd_Cmd_value)
	proto.RegisterEnum("msg.Cmd_PwrValue", Cmd_PwrValue_name, Cmd_PwrValue_value)
	proto.RegisterEnum("msg.Cmd_VolValue", Cmd_VolValue_name, Cmd_VolValue_value)
	proto.RegisterEnum("msg.Cmd_SrcValue", Cmd_SrcValue_name, Cmd_SrcValue_value)
}
